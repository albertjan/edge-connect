var owin = require('owin');

var configure = owin.func({
	assemblyFile: process.env.OWIN_CONNECT_NATIVE || (__dirname + '\\clr\\Owin.Connect.dll'),
	typeName: 'Owin.Connect.OwinConnectHttpServer',
	methodName: 'Configure'
});

var invoke = owin.func({
	assemblyFile: process.env.OWIN_CONNECT_NATIVE || (__dirname + '\\clr\\Owin.Connect.dll'),
	typeName: 'Owin.Connect.OwinConnectHttpServer',
	methodName: 'Invoke'	
});

module.exports = function (options) {
	if (typeof options === 'string') {
		options = { assemblyFile: options };
	}
	else if (typeof options != 'object') {
		throw new Error('Specify the file name of the OWIN assembly DLL or provide an options object.');
	}
	else if (typeof options.assemblyFile !== 'string') {
		throw new Error('OWIN assembly file name must be provided as a string parameter or assemblyFile options property.');
	}	

	var owinAppId;
	return function(req, res, next) {

		if (typeof req.body !== 'object') {
			throw new Error('The request body is not present or is not an object. '+
				'Please make sure the bodyParser middleware is installed.')
		}

		owinAppId !== undefined ? onConfigured() : ensureConfigured();

		function onConfigured() {
			// Create the baseline OWIN env using properties of the request object
			var env = {
				'owin-connect.owinAppId': owinAppId,
				'owin.RequestMethod': req.method,
				'owin.RequestPath': req._parsedUrl.pathname,
				'owin.RequestPathBase': '',
				'owin.RequestProtocol': 'HTTP/' + req.httpVersion,
				'owin.RequestQueryString': req._parsedUrl.query || '',
				'owin.RequestScheme': req.protocol,
				'owin.RequestHeaders': req.headers,
				'owin.RequestBody': new Buffer(JSON.stringify(req.body))
			};

			// Add creation options to the OWIN environement.
			// This is a good mechanism to export global node.js functions to the OWIN handler in .NET.
			for (var i in options) {
				env['node.' + i] = options[i];
			}

			// Add per-request owin properties to the OWIN environment.
			// This is a good mechanism to allow previously running connect middleware 
			// to export request-specific node.js functions to the OWIN handler in .NET.
			if (typeof req.owin === 'object') {
				for (var i in req.owin) {
					env['node.' + i] = req.owin[i];
				}
			}

			// call into .NET OWIN application
			invoke(env, function (error, result) {
				if (error) return next(error);

console.log(result);
				try {
					// Add any response headers generated by the OWIN middleware
					var headers = result['owin.ResponseHeaders'];
					if (typeof headers === 'object') {
						for (var i in headers) {
							res.set(i, headers[i]);
						}
					}

					// Assume that when the OWIN app populated the response code,
					// processing of the request should stop
					var statusCode = result['owin.ResponseStatusCode'];
					if (typeof statusCode === 'number') {
						// Finish the response
						var body = result['owin.ResponseBody'];
						return res.send(statusCode, body); // body can be undefined 
					}
				}
				catch (e) {
					return next(e);
				}

				// Continue running express pipeline - OWIN handler did not close the response.
				return next();
			});
		}

		function ensureConfigured() {
			configure(options, function (error, result) {
				if (error) return next(error);
				// Result is a unique identifier of the OWIN handler in .NET.
				// It is passed to the Invoke method so that .NET code can dispatch the request
				// to the appropriate OWIN handler instance.
				owinAppId = result;
				onConfigured();
			});
		}
	};
};
